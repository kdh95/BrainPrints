# Queue 선입선출(FIFO, First-In-First-Out)
#
# Prioirty Queue : 우선순위가 가장 높은 값을 먼저 추출(완전이진트리)

# 구현방법

# 1. 배열을 이용
# enqueue(1) -> 시간복잡도는 O(1)
# dequeue() 는 어떻게 할까?
# 가장 우선순위가 높은 항목을 찾아야 하기 때문에 최솟값을 찾아야 한다. O(n)
# 계속해서 최솟값을 찾아간다.
# 최솟값을 찾은 후 앞으로 당겨줘야 하는데 이것도 O(n) 이다.
# 그렇기 때문에 전체적으로 O(n)의 시간복잡도가 소요된다.


# 2. 똑같이 배열을 사용하지만 enqueue를 할때 추가 후 정렬을 해준다, 정렬이 O(nlogn)이 소요된다.
# enqueue() -> O(nlogn)
# dequeue() -> O(1)


# 3. 완전 이진 트리
# enqueue() 를 할때 노드를 생성해서 추가한다. 또 우선순위가 높은 순서대로 사장 상단으로 보내준다.
# 이 스왑을 하는 시간복잡도는 O(logn)이 소요된다.
# enqueue() -> O(logn)
# dequeue() -> O(logn)

# 이렇기 때문에 완전 이진 트리로 구현하는 것이 가장 좋아보인다.